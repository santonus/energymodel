//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324607
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.extern .shared .align 4 .b8 shared[];

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.entry _Z14timedReductionPKfPfPl(
	.param .u64 _Z14timedReductionPKfPfPl_param_0,
	.param .u64 _Z14timedReductionPKfPfPl_param_1,
	.param .u64 _Z14timedReductionPKfPfPl_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<6>;
	.reg .s32 	%r<15>;
	.reg .s64 	%rd<25>;


	ld.param.u64 	%rd3, [_Z14timedReductionPKfPfPl_param_0];
	ld.param.u64 	%rd4, [_Z14timedReductionPKfPfPl_param_1];
	ld.param.u64 	%rd5, [_Z14timedReductionPKfPfPl_param_2];
	cvta.to.global.u64 	%rd1, %rd5;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB6_2;

	// inline asm
	mov.u32 	%r6, %clock;
	// inline asm
	cvt.s64.s32	%rd6, %r6;
	mul.wide.s32 	%rd7, %r1, 8;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.u64 	[%rd8], %rd6;

BB6_2:
	cvta.to.global.u64 	%rd9, %rd3;
	mul.wide.s32 	%rd10, %r2, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f2, [%rd11];
	mov.u64 	%rd12, shared;
	add.s64 	%rd2, %rd12, %rd10;
	st.shared.f32 	[%rd2], %f2;
	mov.u32 	%r14, %ntid.x;
	add.s32 	%r7, %r14, %r2;
	mul.wide.u32 	%rd13, %r7, 4;
	add.s64 	%rd14, %rd9, %rd13;
	ld.global.f32 	%f3, [%rd14];
	add.s64 	%rd15, %rd12, %rd13;
	st.shared.f32 	[%rd15], %f3;
	setp.lt.s32	%p3, %r14, 1;
	@%p3 bra 	BB6_7;

BB6_3:
	mov.u32 	%r4, %r14;
	bar.sync 	0;
	setp.ge.s32	%p4, %r2, %r4;
	@%p4 bra 	BB6_6;

	ld.shared.f32 	%f4, [%rd2];
	add.s32 	%r8, %r4, %r2;
	mul.wide.s32 	%rd16, %r8, 4;
	add.s64 	%rd18, %rd12, %rd16;
	ld.shared.f32 	%f1, [%rd18];
	setp.geu.f32	%p5, %f1, %f4;
	@%p5 bra 	BB6_6;

	st.shared.f32 	[%rd2], %f1;

BB6_6:
	shr.u32 	%r9, %r4, 31;
	add.s32 	%r10, %r4, %r9;
	shr.s32 	%r14, %r10, 1;
	setp.gt.s32	%p6, %r4, 1;
	@%p6 bra 	BB6_3;

BB6_7:
	@%p2 bra 	BB6_9;

	cvta.to.global.u64 	%rd19, %rd4;
	ld.shared.f32 	%f5, [shared];
	mul.wide.s32 	%rd20, %r1, 4;
	add.s64 	%rd21, %rd19, %rd20;
	st.global.f32 	[%rd21], %f5;

BB6_9:
	setp.eq.s32	%p1, %r2, 0;
	bar.sync 	0;
	@!%p1 bra 	BB6_11;
	bra.uni 	BB6_10;

BB6_10:
	// inline asm
	mov.u32 	%r11, %clock;
	// inline asm
	cvt.s64.s32	%rd22, %r11;
	mov.u32 	%r12, %nctaid.x;
	add.s32 	%r13, %r12, %r1;
	mul.wide.u32 	%rd23, %r13, 8;
	add.s64 	%rd24, %rd1, %rd23;
	st.global.u64 	[%rd24], %rd22;

BB6_11:
	ret;
}


